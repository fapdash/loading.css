// Generated by LiveScript 1.3.1
var fs, bluebird, path, stylus, render, recurse, list;
fs = require('fs');
bluebird = require('bluebird');
path = require('path');
stylus = require('stylus');
render = function(modPath){
  return new bluebird(function(res, rej){
    var module, defaultConfigs, k, v, base, hash, ref$, code;
    module = require(modPath);
    defaultConfigs = {
      dur: {
        'default': 1,
        type: 'number',
        unit: 's',
        min: 0,
        max: 10
      }
    };
    for (k in defaultConfigs) {
      v = defaultConfigs[k];
      (module.edit || (module.edit = {}))[k] = import$(v, (module.edit || (module.edit = {}))[k] || {});
    }
    base = path.dirname(modPath);
    hash = {};
    for (k in ref$ = module.edit) {
      v = ref$[k];
      hash[k] = v.unit
        ? v['default'] + "" + v.unit
        : v['default'];
    }
    code = "@import 'base.styl'\nconfig = " + JSON.stringify(hash).replace(/"/g, '') + "\n" + module.code();
    return stylus(code).set('filename', base + "/" + module.name + ".styl")['import'](__dirname + '/basic.styl').render(function(err, css){
      if (err) {
        return rej(err);
      } else {
        return res(css);
      }
    });
  });
};
recurse = function(root){
  var list, files, i$, len$, file;
  list = [];
  files = fs.readdirSync(root).map(function(it){
    return root + "/" + it;
  });
  for (i$ = 0, len$ = files.length; i$ < len$; ++i$) {
    file = files[i$];
    if (/\.ls$/.exec(file)) {
      list.push(("./" + file).replace(/\.ls$/, ''));
    } else if (fs.statSync(file).isDirectory()) {
      list = list.concat(recurse(file));
    }
  }
  return list;
};
list = recurse('animation');
bluebird.all(list.map(function(it){
  return render(it);
})).then(function(it){
  return fs.writeFileSync("loading.css", it.join(''));
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}